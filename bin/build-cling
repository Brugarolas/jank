#!/usr/bin/env bash

set -euo pipefail

# We build Cling with Clang for consistency.
export CC=clang
export CXX=clang++

make_j="$(nproc || echo 4)"

while getopts ":hj:" opt; do
  case "${opt}" in
    h)
      echo "Usage ${0} [-j N] [srcdir]"
      exit 0
      ;;
    j)
      make_j="${OPTARG}"
      ;;
    \?)
      echo "Invalid option: ${OPTARG}" 1>&2
      exit 1
      ;;
    :)
      echo "Invalid option: ${OPTARG} requires an argument" 1>&2
      exit 1
      ;;
    *)
      echo "Unexpected input: ${OPTARG}" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

echo "Using ${make_j} cores to build"

srcdir="${PWD}"

cling_url="https://github.com/root-project/cling.git"
cling_branch="master"
llvm_url="https://github.com/root-project/llvm-project.git"
llvm_branch="cling-llvm13"

# $1 == Repo URL
# $2 == Repo branch
# $3 == Path
function shallow_clone()
{ git clone -b "${2}" --depth 1 --shallow-submodules --single-branch "${1}" "${3}"; }

function prepare()
{
  if [[ ! -d "${srcdir}/llvm" ]];
  then
    shallow_clone "${llvm_url}" "${llvm_branch}" "${srcdir}"/llvm
  fi

  if [[ ! -d "${srcdir}/cling" ]];
  then
    git clone -b "${cling_branch}" --shallow-submodules --single-branch "${cling_url}" "${srcdir}"/cling
  fi
}

function build()
{
  mkdir -p "${srcdir}/cling-build"
  cd "${srcdir}/cling-build"

  local ffi_include_dir
  ffi_include_dir="$(pkg-config --cflags-only-I libffi | cut -c3-)"

  cmake -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CXX_STANDARD=17 \
        -DLLVM_TARGETS_TO_BUILD="host;NVPTX" \
        -DLLVM_BUILD_LLVM_DYLIB=OFF \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_ENABLE_SPHINX=OFF \
        -DLLVM_ENABLE_DOXYGEN=OFF \
        -DLLVM_ENABLE_LIBCXX=OFF \
        -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
        -DLLVM_EXTERNAL_PROJECTS=cling \
        -DLLVM_EXTERNAL_CLING_SOURCE_DIR="${srcdir}/cling" \
        -DFFI_INCLUDE_DIR="${ffi_include_dir}" \
        -DCLING_CXX_HEADERS=ON \
        "${srcdir}/llvm/llvm"

  make -j"${make_j}" -C tools/clang
  make -j"${make_j}" -C tools/cling
  make -j"${make_j}" -C tools/llvm-profdata
  make -j"${make_j}" -C tools/llvm-cov
  make -j"${make_j}" -C tools/llvm-config

  # I'm not sure why including compiler-rt in the LLVM projects doesn't build this fully. Also
  # not sure of the currect way to get the libs where Cling wants them, but,
  # hey, this works. For me.
  mkdir -p build-compiler-rt
  pushd build-compiler-rt
    cmake ../../llvm/compiler-rt -DLLVM_CONFIG_PATH="${srcdir}"/cling-build/bin/llvm-config
    make -j"${make_j}"

    case "${OSTYPE}"
    in
      linux-gnu*)
      mkdir -p "${srcdir}"/cling-build/lib/clang/13.0.0/lib/linux/
      cp lib/linux/libclang_rt.profile-x86_64.a "${srcdir}"/cling-build/lib/clang/13.0.0/lib/linux/
      ;;

      darwin*)
      mkdir -p "${srcdir}"/cling-build/lib/clang/13.0.0/lib/darwin/
      cp lib/darwin/libclang_rt.profile_osx.a "${srcdir}"/cling-build/lib/clang/13.0.0/lib/darwin/
      ;;

      *)
      echo "Unsupported platform: ${OSTYPE}" >&2
      exit 1
      ;;
    esac
  popd
}

prepare
build
